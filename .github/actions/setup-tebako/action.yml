name: 'Setup tebako'
description: 'Setup Ubuntu ci environment for tebako'
inputs:
  cache:
    description: 'Tebako cache mode: off/build/use'
    required: true
    type: string
  cache_path:
    description: 'Tebako cache root folder'
    required: true
    default: '.tebako/deps'
    type: string
  cache_ver:
    description: 'Tebako cache version'
    required: true
    default: '0'
    type: string
  ruby_version:
    description: 'Ruby version to install, "env" to use RUBY_VER environment variable'
    required: true
    default: 'env'
    type: string
  bundler_version:
    description: 'Bundler version to install'
    required: true
    default: 'default'
    type: string
runs:
  using: "composite"
  steps:
      # FIXME replace it with *.env file read after moving back to tebako
    - name: Prepare env
      shell: bash
      run: |
        OS=$(uname -s)
        if [ "$OS" = "Linux" ] && [ -e "/etc/lsb-release" ]; then
            echo "CC=clang-12" >> $GITHUB_ENV
            echo "CXX=clang++-12" >> $GITHUB_ENV
            echo "BUNDLE_BUILD__SASSC=--enable-static-stdlib" >> $GITHUB_ENV
        elif [ "$OS" = "Darwin" ]; then
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
            echo "XCODE_VERSION=12.4" >> $GITHUB_ENV
        elif [ "$OS" = "Linux" ] && [ -e "/etc/alpine-release" ]; then
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
            echo "VCPKG_FORCE_SYSTEM_BINARIES=1" >> $GITHUB_ENV
        else
            echo "Unsupported operating system."
        fi

        echo "BUILD_TYPE=Release" >> $GITHUB_ENV
        echo "TEBAKO_DIR=.archive/tebako" >> $GITHUB_ENV
        echo "INCBIN_TAG=348e36b" >> $GITHUB_ENV
        echo "DWARFS_WR_TAG=v0.4.0" >> $GITHUB_ENV

    - name: Install apt packages
      if: startsWith(runner.os, 'ubuntu-')
      shell: bash
      run: |
        sudo apt-get -y update
        sudo apt-get -y install                                                   \
        binutils-dev libevent-dev acl-dev libfmt-dev libjemalloc-dev              \
        libdouble-conversion-dev libiberty-dev liblz4-dev liblzma-dev libssl-dev  \
        libboost-filesystem-dev libboost-program-options-dev libboost-system-dev  \
        libboost-iostreams-dev  libboost-date-time-dev libboost-context-dev       \
        libboost-regex-dev libboost-thread-dev libbrotli-dev libunwind-dev        \
        libdwarf-dev libelf-dev libgoogle-glog-dev libffi-dev libgdbm-dev         \
        libyaml-dev libncurses-dev libreadline-dev libutfcpp-dev

    - name: Select XCode 12.4 & SDK 11.1
      if: startsWith(runner.os, 'macos-')
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}

    - name: Install brew packages
      if: startsWith(runner.os, 'macos-')
      shell: bash
      run: |
        brew update
        # Already installed: openssl@1.1, libevent, libsodium, lz4, xz, zlib, gdbm, ncurses, pkg-config, libyaml
        brew install bison flex binutils libffi double-conversion boost jemalloc fmt glog gnu-sed bash
        echo "$(brew --prefix bison)/bin" >> $GITHUB_PATH

    - name: Install Ruby
      if: inputs.ruby_version != 'skip'
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ inputs.ruby_version != 'env' && inputs.ruby_version || env.RUBY_VER }}
        bundler: ${{ inputs.bundler_version }}
        bundler-cache: false

    - name: Install tebako
      shell: bash
      run: sudo gem install tebako

    - name: Create deps folder
      if: inputs.cache != 'off'
      shell: bash
      run: mkdir -p ${{ inputs.cache_path }}

    - name: Process cache
      if: inputs.cache != 'off'
      uses: actions/cache@v3
      with:
        path: ${{ inputs.cache_path }}
        key: ${{ runner.os }}-${{ env.CC }}-v${{ inputs.cache_ver }}
        fail-on-cache-miss: inputs.cache == 'use'
